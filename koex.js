// Generated by CoffeeScript 1.6.3
(function() {
  var handlers;

  handlers = function(ko) {
    var bindingHandlers, dataFor, extend, format, registerEventHandler, setTextContent, unwrap, _ref;
    format = function(template, vars) {
      return template.replace(/\{([^}]+)\}/g, function(key) {
        return vars[key];
      });
    };
    dataFor = ko.dataFor, unwrap = ko.unwrap, bindingHandlers = ko.bindingHandlers;
    _ref = ko.utils, setTextContent = _ref.setTextContent, registerEventHandler = _ref.registerEventHandler, extend = _ref.extend;
    return extend(bindingHandlers, {
      bignum: {
        update: function(el, valueAccessor) {
          var num;
          num = unwrap(valueAccessor());
          return el.innerHTML = num.toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ',');
        }
      },
      date: {
        update: function(element, valueAccessor) {
          var d, day, month, x, year, _ref1;
          d = new Date(unwrap(valueAccessor()) * 1000);
          _ref1 = (function() {
            var _i, _len, _ref1, _results;
            _ref1 = [d.getFullYear(), d.getMonth() + 1, d.getDate()];
            _results = [];
            for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
              x = _ref1[_i];
              _results.push(x < 10 ? "0" + x : x);
            }
            return _results;
          })(), year = _ref1[0], month = _ref1[1], day = _ref1[2];
          return element.innerHTML = "" + year + "-" + month + "-" + day;
        }
      },
      datetime: {
        update: function(element, valueAccessor) {
          var d, day, hour, minute, month, second, x, year, _ref1;
          d = new Date(unwrap(valueAccessor()) * 1000);
          _ref1 = (function() {
            var _i, _len, _ref1, _results;
            _ref1 = [d.getFullYear(), d.getMonth() + 1, d.getDate(), d.getHours(), d.getMinutes(), d.getSeconds()];
            _results = [];
            for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
              x = _ref1[_i];
              _results.push(x < 10 ? "0" + x : x);
            }
            return _results;
          })(), year = _ref1[0], month = _ref1[1], day = _ref1[2], hour = _ref1[3], minute = _ref1[4], second = _ref1[5];
          return element.innerHTML = "" + year + "-" + month + "-" + day + " " + hour + ":" + minute + ":" + second;
        }
      },
      disabled: {
        init: function(element, valueAccessor) {
          return registerEventHandler(element, 'click', function(e) {
            if (e.preventDefault) {
              return e.preventDefault();
            } else {
              return e.returnValue = false;
            }
          });
        }
      },
      drag: {
        init: function(element, valueAccessor) {
          var defautls, opts;
          opts = unwrap(valueAccessor());
          defautls = {
            effect: 'move',
            type: 'text/plain',
            data: ''
          };
          opts = extend(defautls, opts);
          element.draggable = true;
          return registerEventHandler(element, 'dragstart', function(e) {
            e.originalEvent.dataTransfer.setData(opts.type, opts.data);
            e.originalEvent.dataTransfer.effectAllowed = opts.effect;
            return value(dataFor(element));
          });
        }
      },
      drop: {
        init: function(element, valueAccessor, allBindingsAccessor, viewModel) {
          var value;
          value = valueAccessor();
          registerEventHandler(element, 'dragenter', function(event) {
            return false;
          });
          registerEventHandler(element, 'dragover', function(event) {
            return false;
          });
          return registerEventHandler(element, 'drop', function(event) {
            var allBindings;
            allBindings = allBindingsAccessor();
            if (allBindings.foreach) {
              allBindings.foreach.push(viewModel._draggingItem);
              viewModel._draggingItem = null;
            } else if (allBindings.value) {
              allBindings.value(viewModel._draggingItem);
              viewModel._draggingItem = null;
            }
            return false;
          });
        }
      },
      dropfiles: {
        init: function(element, valueAccessor, allBindingsAccessor, viewModel) {
          var value;
          value = valueAccessor();
          ko.utils.registerEventHandler(element, 'dragover', function(e) {
            e.preventDefault();
            return e.stopPropagation();
          });
          ko.utils.registerEventHandler(element, 'dragleave', function(e) {
            e.preventDefault();
            return e.stopPropagation();
          });
          return ko.utils.registerEventHandler(element, 'drop', function(e) {
            var file, files, _i, _len, _ref1, _results;
            e.preventDefault();
            e.stopPropagation();
            e = e.originalEvent;
            files = (_ref1 = e.target.files) != null ? _ref1 : e.dataTransfer.files;
            _results = [];
            for (_i = 0, _len = files.length; _i < _len; _i++) {
              file = files[_i];
              _results.push(value.push(file));
            }
            return _results;
          });
        }
      },
      href: {
        update: function(element, valueAccessor) {
          return element.href = unwrap(valueAccessor());
        }
      },
      filesize: {
        update: function(element, valueAccessor) {
          var unit, units, value;
          value = parseInt(unwrap(valueAccessor()), 10);
          units = ['', 'K', 'M', 'G', 'T'];
          unit = 0;
          while (value >= 1024 && unit < units.length - 1) {
            value = value / 1024;
            unit += 1;
          }
          return element.innerHTML = unit ? "" + (value.toFixed(2)) + " " + units[unit] : value;
        }
      },
      longtext: {
        update: function(element, valueAccessor) {
          var text;
          text = unwrap(valueAccessor());
          return element.innerHTML = text.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#039;").replace(/\n/g, "<br/>");
        }
      },
      progress: {
        update: function(element, valueAccessor) {
          var value;
          value = unwrap(valueAccessor());
          return element.style.width = "" + (Math.round(value * 100)) + "%";
        }
      },
      src: {
        update: function(element, valueAccessor) {
          return element.src = unwrap(valueAccessor());
        }
      },
      stopBindings: {
        init: function() {
          return {
            controlsDescendantBindings: true
          };
        }
      },
      toggle: {
        init: function(el, valueAccessor) {
          var value;
          value = valueAccessor();
          return registerEventHandler(el, 'click', function(e) {
            return value(!value());
          });
        }
      },
      _: {
        update: function(element, valueAccessor, allBindingsAccessor, viewModel) {
          var key, template, _ref1, _ref2;
          key = unwrap(valueAccessor());
          return setTextContent(element, 'string' === typeof key ? (_ref1 = viewModel.lang[key]) != null ? _ref1 : key : (template = (_ref2 = viewModel.lang[key.key]) != null ? _ref2 : key.key, format(template, key)));
        }
      }
    });
  };

  if ('object' === typeof ko) {
    handlers(ko);
  } else {
    if (typeof define === "function") {
      define(function() {
        return handlers;
      });
    }
  }

}).call(this);
